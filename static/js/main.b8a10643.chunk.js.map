{"version":3,"sources":["Util/hsv.js","Components/Bars.js","Components/ColorGrid.js","Components/Text.js","App.js","serviceWorker.js","index.js"],"names":["rgbFromHsv","h","s","v","rgb","f","Math","floor","pv","qv","tv","Bars","props","heights","i","push","random","state","bars","className","style","width","height","margin","backgroundColor","barHues","barSaturation","outline","selected","undefined","key","onClick","e","stopPropagation","display","alignItems","justifyContent","Component","ColorGrid","saturation","prevProps","this","setState","dimensions","size","hue","sizeSquared","items","color","borderRadius","transition","Number","opacity","flexWrap","padding","textShadow","paddingTop","paddingRight","type","min","max","value","target","onChange","Text","d","Date","time","toLocaleTimeString","date","toLocaleDateString","intervalID","setInterval","clearInterval","textHue","textSaturation","fontSize","serverUrl","App","presets","localStorage","getItem","JSON","parse","loading","error","preset","getServerColors","axios","get","then","response","data","setting","catch","err","console","post","stringify","name","prompt","setItem","setServerColors","selectedText","flexDirection","alignContent","message","border","marginBottom","textAlign","visibility","updateColor","marginTop","loadColorPreset","Object","keys","map","p","saveColorPreset","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8a10643.chunk.js","sourcesContent":["// ported from arduino code so that it is comsistent across platforms\nexport function rgbFromHsv(h, s, v) {\n  // this is the algorithm to convert from RGB to HSV\n  h = Math.floor((h * 192) / 256); // 0..191\n  let i = Math.floor(h / 32); // We want a value of 0 thru 5\n  let f = (h % 32) * 8; // 'fractional' part of 'i' 0..248 in jumps\n\n  let sInv = 255 - s; // 0 -> 0xff, 0xff -> 0\n  let fInv = 255 - f; // 0 -> 0xff, 0xff -> 0\n  let pv = (v * sInv) / 256; // pv will be in range 0 - 255\n  let qv = (v * (256 - (s * f) / 256)) / 256;\n  let tv = (v * (256 - (s * fInv) / 256)) / 256;\n\n  let rgb;\n  switch (i) {\n    case 0:\n      rgb = [v, tv, pv];\n      break;\n    case 1:\n      rgb = [qv, v, pv];\n      break;\n    case 2:\n      rgb = [pv, v, tv];\n      break;\n    case 3:\n      rgb = [pv, qv, v];\n      break;\n    case 4:\n      rgb = [tv, pv, v];\n      break;\n    case 5:\n    default:\n      rgb = [v, pv, qv];\n      break;\n  }\n\n  return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]}`;\n}\n","import React from 'react';\nimport { Component } from 'react';\nimport './Bars.css';\nimport { rgbFromHsv } from '../Util/hsv';\n\nexport class Bars extends Component {\n  constructor(props) {\n    super(props);\n\n    const heights = [];\n    for (let i = 0; i < 16; i++) {\n      heights.push(Math.random() * 60 + 20);\n    }\n    this.state = { heights };\n  }\n\n  render() {\n    const bars = [];\n    for (let i = 0; i < 16; i++) {\n      bars.push(\n        <div\n          className=\"bar\"\n          style={{\n            width: 18,\n            height: this.state.heights[i],\n            margin: 2,\n            backgroundColor: rgbFromHsv(this.props.barHues[i], this.props.barSaturation[i], 255),\n            outline: this.props.selected === i ? '1px solid white' : undefined\n          }}\n          key={i}\n          onClick={e => {\n            this.props.onClick(i);\n            e.stopPropagation();\n          }}\n        ></div>\n      );\n    }\n\n    return <div style={{ display: 'flex', alignItems: 'flex-end', justifyContent: 'center' }}>{bars}</div>;\n  }\n}\n","import React from 'react';\nimport { Component } from 'react';\nimport { rgbFromHsv } from '../Util/hsv';\nimport './ColorGrid.css';\n\nexport class ColorGrid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { saturation: 255 };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.saturation !== prevProps.saturation) {\n      this.setState({ saturation: this.props.saturation });\n    }\n  }\n\n  render() {\n    const { dimensions, size, margin, hue } = this.props;\n    const sizeSquared = dimensions * dimensions;\n    const width = (size + margin * 2) * dimensions;\n\n    const items = [];\n\n    for (let i = 0; i < sizeSquared; i++) {\n      const h = Math.floor((i / sizeSquared) * 255);\n      const color = rgbFromHsv(h, this.state.saturation, 255);\n\n      items.push(\n        <div\n          className=\"gridItem\"\n          style={{\n            width: size,\n            height: size,\n            backgroundColor: color,\n            margin,\n            borderRadius: size / 12,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            transition: 'all 0.2s',\n            outline: hue === h ? '1px solid white' : '1px solid transparent'\n          }}\n          key={i}\n          onClick={e => {\n            this.props.onClick(h, Number(this.state.saturation));\n            e.stopPropagation();\n          }}\n        >\n          <div style={{ opacity: 0, transition: 'all 0.2s' }}>{h}</div>\n        </div>\n      );\n    }\n\n    return (\n      <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', width: width + margin * 2 }}>\n        <div\n          style={{\n            backgroundColor: 'black',\n            display: 'flex',\n            flexWrap: 'wrap',\n            width,\n            padding: margin,\n            textShadow: '1px 1px black'\n          }}\n        >\n          {items}\n        </div>\n\n        <div style={{ display: 'flex', alignItems: 'center', paddingTop: margin * 2 }}>\n          <label style={{ paddingRight: 5 }}>Saturation</label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"255\"\n            value={this.state.saturation}\n            onClick={e => {\n              this.setState({ saturation: e.target.value });\n              e.stopPropagation();\n            }}\n            onChange={e => {\n              this.setState({ saturation: e.target.value });\n              e.stopPropagation();\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Component } from 'react';\nimport './Text.css';\nimport { rgbFromHsv } from '../Util/hsv';\n\nexport class Text extends Component {\n  constructor(props) {\n    super(props);\n\n    const d = new Date();\n    this.state = { time: d.toLocaleTimeString(), date: d.toLocaleDateString() };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => {\n      const d = new Date();\n      this.setState({ time: d.toLocaleTimeString(), date: d.toLocaleDateString() });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  render() {\n    return (\n      <div\n        className=\"text\"\n        style={{\n          color: rgbFromHsv(this.props.textHue, this.props.textSaturation, 255),\n          fontSize: 16,\n          width: '100%',\n          outline: this.props.selected ? '1px solid white' : undefined\n        }}\n        onClick={e => {\n          this.props.onClick(e);\n          e.stopPropagation();\n        }}\n      >\n        <div style={{ display: 'flex', alignItems: 'flex-begin', justifyContent: 'space-between', width: '100%' }}>\n          <div style={{ fontSize: 32 }}>{this.state.time}</div>\n          <div style={{ paddingTop: 4 }}>Weather</div>\n        </div>\n        <div>{this.state.date}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Bars } from './Components/Bars';\nimport { ColorGrid } from './Components/ColorGrid';\nimport { Text } from './Components/Text';\n\nconst serverUrl = 'https://home.amcolash.com:9000/spectrum/color';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    let presets = localStorage.getItem('presets');\n    if (presets) presets = JSON.parse(presets);\n    else presets = {};\n\n    this.state = {\n      loading: true,\n      error: null,\n      barHues: [],\n      barSaturation: [],\n      textHue: 0,\n      textSaturation: 0,\n      selected: -1,\n      presets,\n      preset: ''\n    };\n  }\n\n  componentDidMount() {\n    this.getServerColors();\n  }\n\n  getServerColors(preset) {\n    axios\n      .get(serverUrl)\n      .then(response => {\n        const data = response.data;\n        this.setState({ loading: false, setting: false, preset: preset || '', ...data });\n      })\n      .catch(err => {\n        console.error(err);\n        this.setState({ error: err });\n      });\n  }\n\n  setServerColors(data, preset) {\n    this.setState({ setting: true, preset: preset || '' }, () => {\n      axios\n        .post(serverUrl + '?data=' + JSON.stringify(data))\n        .then(() => this.getServerColors(preset))\n        .catch(err => {\n          console.error(err);\n        });\n    });\n  }\n\n  saveColorPreset() {\n    let presets = localStorage.getItem('presets');\n    if (presets) presets = JSON.parse(presets);\n    else presets = {};\n\n    const name = prompt('Preset Name?', 'default');\n    if (name) {\n      const { barHues, barSaturation, textHue, textSaturation } = this.state;\n      presets[name] = { barHues, barSaturation, textHue, textSaturation };\n      localStorage.setItem('presets', JSON.stringify(presets));\n\n      this.setState({ presets, preset: name });\n    }\n  }\n\n  loadColorPreset(name) {\n    let presets = localStorage.getItem('presets');\n    if (presets) {\n      presets = JSON.parse(presets);\n      if (presets[name]) {\n        const { barHues, barSaturation, textHue, textSaturation } = presets[name];\n\n        this.setServerColors({ barHues, barSaturation, textHue, textSaturation }, name);\n      }\n    }\n  }\n\n  updateColor(h, s) {\n    let { barHues, barSaturation, textHue, textSaturation, selected } = this.state;\n\n    if (this.state.selected === -1) return;\n    else if (this.state.selected === -2) {\n      textHue = h;\n      textSaturation = s;\n    } else {\n      barHues = [...this.state.barHues];\n      barSaturation = [...this.state.barSaturation];\n      barHues[selected] = h;\n      barSaturation[selected] = s;\n    }\n\n    this.setServerColors({ barHues, barSaturation, textHue, textSaturation });\n  }\n\n  render() {\n    const { barHues, barSaturation, error, loading, selected, setting, textHue, textSaturation } = this.state;\n\n    let selectedText = 'Selected: ';\n    let hue = -1;\n    let saturation = 255;\n    if (selected === -1) selectedText += 'Nothing';\n    else if (selected === -2) {\n      selectedText += 'Text';\n      hue = textHue;\n      saturation = textSaturation;\n    } else {\n      selectedText += 'Bar ' + selected;\n      hue = barHues[selected];\n      saturation = barSaturation[selected];\n    }\n\n    return (\n      <div\n        className=\"app\"\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          flexWrap: 'wrap',\n          alignContent: 'center',\n          justifyContent: 'center',\n          alignItems: 'center',\n          height: '100vh'\n        }}\n        onClick={() => this.setState({ selected: -1 })}\n      >\n        {error ? (\n          <h1>{error.message}</h1>\n        ) : loading ? (\n          <h1>Loading...</h1>\n        ) : (\n          <Fragment>\n            <div\n              className=\"display\"\n              style={{\n                width: '22em',\n                height: '12.3em',\n                border: '1px solid gray',\n                display: 'flex',\n                flexWrap: 'wrap',\n                padding: 3,\n                borderRadius: 3,\n                marginBottom: 20\n              }}\n            >\n              <Text\n                textHue={textHue}\n                textSaturation={textSaturation}\n                selected={this.state.selected === -2}\n                onClick={() => this.setState({ selected: -2 })}\n              />\n              <div\n                style={{\n                  width: '100%',\n                  textAlign: 'center',\n                  visibility: selectedText === 'Selected: Nothing' && !setting ? 'hidden' : undefined\n                }}\n              >\n                {setting ? 'Setting Colors...' : selectedText}\n              </div>\n              <Bars barHues={barHues} barSaturation={barSaturation} selected={selected} onClick={i => this.setState({ selected: i })} />\n            </div>\n\n            <ColorGrid dimensions={7} size={32} margin={2} hue={hue} saturation={saturation} onClick={(h, s) => this.updateColor(h, s)} />\n\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: 20 }}>\n              <div>\n                <label>Presets</label>\n                <select onChange={e => this.loadColorPreset(e.target.value)} value={this.state.preset}>\n                  {['', ...Object.keys(this.state.presets)].map(p => (\n                    <option value={p} key={p}>\n                      {p}\n                    </option>\n                  ))}\n                </select>\n                <button onClick={() => this.saveColorPreset(true)}>Save</button>\n                <button\n                  onClick={() => {\n                    this.setState({ setting: true }, () => axios.post(serverUrl + '?reset').then(this.getServerColors()));\n                  }}\n                >\n                  Reset\n                </button>\n              </div>\n            </div>\n          </Fragment>\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}