{"version":3,"sources":["Util/hsv.js","Components/Bars.js","Components/ColorGrid.js","Components/Spinner.js","Components/Text.js","App.js","serviceWorker.js","index.js"],"names":["rgbFromHsv","h","s","v","rgb","f","Math","floor","pv","qv","tv","Bars","props","heights","i","push","random","state","bars","className","style","width","height","margin","backgroundColor","barHues","barSaturation","outline","selected","undefined","key","onClick","e","stopPropagation","display","alignItems","justifyContent","Component","ColorGrid","saturation","syncSaturation","prevProps","prevState","this","setState","dimensions","size","hue","sizeSquared","items","color","borderRadius","transition","Number","opacity","flexWrap","padding","textShadow","flexDirection","paddingTop","paddingRight","type","min","max","value","target","onChange","paddingLeft","checked","Spinner","visible","Text","d","Date","time","toLocaleTimeString","date","toLocaleDateString","intervalID","setInterval","clearInterval","textHue","textSaturation","fontSize","serverUrl","App","presets","localStorage","getItem","JSON","parse","loading","setting","error","preset","tmpHue","getServerColors","axios","get","then","response","data","catch","err","console","post","stringify","name","prompt","setItem","setServerColors","selectedText","alignContent","message","border","marginBottom","flexGrow","position","paddingBottom","updateColor","marginTop","loadColorPreset","Object","keys","sort","a","b","localeCompare","map","p","saveColorPreset","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8ZACO,SAASA,EAAWC,EAAGC,EAAGC,GAG/B,IASIC,EARAC,GAFJJ,EAAIK,KAAKC,MAAW,IAAJN,EAAW,MAEd,GAAM,EAIfO,EAAML,GAFC,IAAMD,GAEK,IAClBO,EAAMN,GAAK,IAAOD,EAAIG,EAAK,KAAQ,IACnCK,EAAMP,GAAK,IAAOD,GAHX,IAAMG,GAGiB,KAAQ,IAG1C,OAVQC,KAAKC,MAAMN,EAAI,KAWrB,KAAK,EACHG,EAAM,CAACD,EAAGO,EAAIF,GACd,MACF,KAAK,EACHJ,EAAM,CAACK,EAAIN,EAAGK,GACd,MACF,KAAK,EACHJ,EAAM,CAACI,EAAIL,EAAGO,GACd,MACF,KAAK,EACHN,EAAM,CAACI,EAAIC,EAAIN,GACf,MACF,KAAK,EACHC,EAAM,CAACM,EAAIF,EAAIL,GACf,MACF,KAAK,EACL,QACEC,EAAM,CAACD,EAAGK,EAAIC,GAIlB,MAAM,OAAN,OAAcL,EAAI,GAAlB,aAAyBA,EAAI,GAA7B,aAAoCA,EAAI,IC/BnC,IAAMO,EAAb,YACE,WAAYC,GAAQ,IAAD,sBACjB,4CAAMA,IAGN,IADA,IAAMC,EAAU,GACPC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAQE,KAAqB,GAAhBT,KAAKU,SAAgB,IALnB,OAOjB,EAAKC,MAAQ,CAAEJ,WAPE,EADrB,sEAaI,IAFQ,IAAD,OACDK,EAAO,GADN,WAEEJ,GACPI,EAAKH,KACH,yBACEI,UAAU,MACVC,MAAO,CACLC,MAAO,GACPC,OAAQ,EAAKL,MAAMJ,QAAQC,GAC3BS,OAAQ,EACRC,gBAAiBxB,EAAW,EAAKY,MAAMa,QAAQX,GAAI,EAAKF,MAAMc,cAAcZ,GAAI,KAChFa,QAAS,EAAKf,MAAMgB,WAAad,EAAI,uBAAoBe,GAE3DC,IAAKhB,EACLiB,QAAS,SAAAC,GACP,EAAKpB,MAAMmB,QAAQjB,GACnBkB,EAAEC,uBAdDnB,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAoBT,OAAO,yBAAKM,MAAO,CAAEc,QAAS,OAAQC,WAAY,WAAYC,eAAgB,WAAalB,OAjC/F,GAA0BmB,aCAbC,G,MAAb,YACE,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KACDK,MAAQ,CAAEsB,WAAY,IAAKC,gBAAgB,GAF/B,EADrB,gFAMqBC,EAAWC,IAGzBC,KAAK/B,MAAM2B,aAAeE,EAAUF,YAAcI,KAAK1B,MAAMuB,iBAC5DE,EAAUF,gBAAkBG,KAAK1B,MAAMuB,iBAEzCG,KAAKC,SAAS,CAAEL,WAAYI,KAAK/B,MAAM2B,eAZ7C,+BAuBI,IAPQ,IAAD,SACmCI,KAAK/B,MAAvCiC,EADD,EACCA,WAAYC,EADb,EACaA,KAAMvB,EADnB,EACmBA,OAAQwB,EAD3B,EAC2BA,IAC5BC,EAAcH,EAAaA,EAC3BxB,GAASyB,EAAgB,EAATvB,GAAcsB,EAE9BI,EAAQ,GALP,WAOEnC,GACP,IAAMb,EAAIK,KAAKC,MAAOO,EAAIkC,EAAe,KACnCE,EAAQlD,EAAWC,EAAG,EAAKgB,MAAMsB,WAAY,KAEnDU,EAAMlC,KACJ,yBACEI,UAAU,WACVC,MAAO,CACLC,MAAOyB,EACPxB,OAAQwB,EACRtB,gBAAiB0B,EACjB3B,SACA4B,aAAcL,EAAO,GACrBZ,QAAS,OACTE,eAAgB,SAChBD,WAAY,SACZiB,WAAY,WACZzB,QAASoB,IAAQ9C,EAAI,kBAAoB,yBAE3C6B,IAAKhB,EACLiB,QAAS,SAAAC,GACP,EAAKpB,MAAMmB,QAAQ9B,EAAGoD,OAAO,EAAKpC,MAAMsB,aACxCP,EAAEC,oBAGJ,yBAAKb,MAAO,CAAEkC,QAAS,EAAGF,WAAY,aAAenD,MAzBlDa,EAAI,EAAGA,EAAIkC,EAAalC,IAAM,EAA9BA,GA8BT,OACE,yBAAKM,MAAO,CAAEc,QAAS,OAAQqB,SAAU,OAAQnB,eAAgB,SAAUf,MAAOA,EAAiB,EAATE,IACxF,yBACEH,MAAO,CACLI,gBAAiB,QACjBU,QAAS,OACTqB,SAAU,OACVlC,QACAmC,QAASjC,EACTkC,WAAY,kBAGbR,GAGH,yBAAK7B,MAAO,CAAEc,QAAS,OAAQwB,cAAe,SAAUvB,WAAY,SAAUwB,WAAY,KACxF,yBAAKvC,MAAO,CAAEc,QAAS,OAAQC,WAAY,WACzC,2BAAOf,MAAO,CAAEwC,aAAc,IAA9B,cACA,2BACEC,KAAK,QACLC,IAAI,IACJC,IAAI,MACJC,MAAOrB,KAAK1B,MAAMsB,WAClBR,QAAS,SAAAC,GACP,EAAKY,SAAS,CAAEL,WAAYP,EAAEiC,OAAOD,QACrChC,EAAEC,mBAEJiC,SAAU,SAAAlC,GACR,EAAKY,SAAS,CAAEL,WAAYP,EAAEiC,OAAOD,QACrChC,EAAEC,qBAGN,0BAAMb,MAAO,CAAE+C,YAAa,IAAMxB,KAAK1B,MAAMsB,aAG/C,yBAAKnB,MAAO,CAAEc,QAAS,SACrB,2BACE2B,KAAK,WACLO,QAASzB,KAAK1B,MAAMuB,eACpBT,QAAS,SAAAC,GACP,EAAKY,SAAS,CAAEJ,gBAAiB,EAAKvB,MAAMuB,iBAC5CR,EAAEC,mBAEJiC,SAAU,SAAAlC,GACR,EAAKY,SAAS,CAAEJ,gBAAiB,EAAKvB,MAAMuB,iBAC5CR,EAAEC,qBAGN,yDArGZ,GAA+BI,cCClBgC,G,MAAb,iLAEI,IAAIlD,EAAY,eAGhB,OAFKwB,KAAK/B,MAAM0D,UAASnD,GAAa,WAGpC,yBAAKA,UAAWA,EAAWC,MAAO,CAAEC,MAAOsB,KAAK/B,MAAMS,OAAS,GAAIC,OAAQqB,KAAK/B,MAAMU,QAAU,KAC9F,yBAAKH,UAAU,qBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,0BAfvB,GAA6BkB,cCDhBkC,G,MAAb,YACE,WAAY3D,GAAQ,IAAD,sBACjB,4CAAMA,IAEN,IAAM4D,EAAI,IAAIC,KAHG,OAIjB,EAAKxD,MAAQ,CAAEyD,KAAMF,EAAEG,qBAAsBC,KAAMJ,EAAEK,sBAJpC,EADrB,iFAQuB,IAAD,OAClBlC,KAAKmC,WAAaC,aAAY,WAC5B,IAAMP,EAAI,IAAIC,KACd,EAAK7B,SAAS,CAAE8B,KAAMF,EAAEG,qBAAsBC,KAAMJ,EAAEK,yBACrD,OAZP,6CAgBIG,cAAcrC,KAAKmC,cAhBvB,+BAmBY,IAAD,OACP,OACE,yBACE3D,UAAU,OACVC,MAAO,CACL8B,MAAOlD,EAAW2C,KAAK/B,MAAMqE,QAAStC,KAAK/B,MAAMsE,eAAgB,KACjEC,SAAU,GACV9D,MAAO,OACPM,QAASgB,KAAK/B,MAAMgB,SAAW,uBAAoBC,GAErDE,QAAS,SAAAC,GACP,EAAKpB,MAAMmB,QAAQC,GACnBA,EAAEC,oBAGJ,yBAAKb,MAAO,CAAEc,QAAS,OAAQC,WAAY,aAAcC,eAAgB,gBAAiBf,MAAO,SAC/F,yBAAKD,MAAO,CAAE+D,SAAU,KAAOxC,KAAK1B,MAAMyD,MAC1C,yBAAKtD,MAAO,CAAEuC,WAAY,IAA1B,YAEF,6BAAMhB,KAAK1B,MAAM2D,WAtCzB,GAA0BvC,cCIpB+C,EAAY,gDAELC,EAAb,YACE,WAAYzE,GAAQ,IAAD,sBACjB,4CAAMA,IAEN,IAAI0E,EAAUC,aAAaC,QAAQ,WAHlB,OAIJF,EAATA,EAAmBG,KAAKC,MAAMJ,GACnB,GAEf,EAAKrE,MAAQ,CACX0E,SAAS,EACTC,SAAS,EACTC,MAAO,KACPpE,QAAS,GACTC,cAAe,GACfuD,QAAS,EACTC,eAAgB,EAChBtD,UAAW,EACX0D,UACAQ,OAAQ,GACRC,OAAQ,MAlBO,EADrB,iFAwBIpD,KAAKqD,oBAxBT,sCA2BkBF,GAAS,IAAD,OACtBG,IACGC,IAAId,GACJe,MAAK,SAAAC,GAAQ,OAAI,EAAKxD,SAAL,aAAgB+C,SAAS,EAAOC,SAAS,EAAOG,OAAQ,KAAMD,OAAQA,GAAU,IAAOM,EAASC,UACjHC,OAAM,SAAAC,GACLC,QAAQX,MAAMU,GACd,EAAK3D,SAAS,CAAEiD,MAAOU,SAjC/B,sCAqCkBF,EAAMP,GAAS,IAAD,OAC5BnD,KAAKC,SAAS,CAAEgD,SAAS,EAAME,OAAQA,GAAU,KAAM,WACrDG,IACGQ,KAAKrB,EAAY,SAAWK,KAAKiB,UAAUL,IAC3CF,MAAK,SAAAC,GAAQ,OAAI,EAAKxD,SAAL,aAAgB+C,SAAS,EAAOC,SAAS,EAAOG,OAAQ,KAAMD,OAAQA,GAAU,IAAOM,EAASC,UACjHC,OAAM,SAAAC,GACLC,QAAQX,MAAMU,WA3CxB,wCAiDI,IAAIjB,EAAUC,aAAaC,QAAQ,WACtBF,EAATA,EAAmBG,KAAKC,MAAMJ,GACnB,GAEf,IAAMqB,EAAOC,OAAO,eAAgB,WACpC,GAAID,EAAM,CAAC,IAAD,EACoDhE,KAAK1B,MAAzDQ,EADA,EACAA,QAASC,EADT,EACSA,cAAeuD,EADxB,EACwBA,QAASC,EADjC,EACiCA,eACzCI,EAAQqB,GAAQ,CAAElF,UAASC,gBAAeuD,UAASC,kBACnDK,aAAasB,QAAQ,UAAWpB,KAAKiB,UAAUpB,IAE/C3C,KAAKC,SAAS,CAAE0C,UAASQ,OAAQa,OA3DvC,sCA+DkBA,GACd,IAAIrB,EAAUC,aAAaC,QAAQ,WACnC,GAAIF,IACFA,EAAUG,KAAKC,MAAMJ,IACTqB,GAAO,CAAC,IAAD,EAC2CrB,EAAQqB,GAA5DlF,EADS,EACTA,QAASC,EADA,EACAA,cAAeuD,EADf,EACeA,QAASC,EADxB,EACwBA,eAEzCvC,KAAKmE,gBAAgB,CAAErF,UAASC,gBAAeuD,UAASC,kBAAkByB,MAtElF,kCA2Ec1G,EAAGC,GAAI,IAAD,OAChByC,KAAKC,SAAS,CAAEmD,OAAQ9F,IAAK,WAAO,IAAD,EACmC,EAAKgB,MAAnEQ,EAD2B,EAC3BA,QAASC,EADkB,EAClBA,cAAeuD,EADG,EACHA,QAASC,EADN,EACMA,eAAgBtD,EADtB,EACsBA,UAE1B,IAAzB,EAAKX,MAAMW,YACmB,IAAzB,EAAKX,MAAMW,UAClBqD,EAAUhF,EACViF,EAAiBhF,IAEjBuB,EAAO,YAAO,EAAKR,MAAMQ,SACzBC,EAAa,YAAO,EAAKT,MAAMS,eAC/BD,EAAQG,GAAY3B,EACpByB,EAAcE,GAAY1B,GAG5B,EAAK4G,gBAAgB,CAAErF,UAASC,gBAAeuD,UAASC,yBA1F9D,+BA8FY,IAAD,SACgGvC,KAAK1B,MAApGQ,EADD,EACCA,QAASC,EADV,EACUA,cAAemE,EADzB,EACyBA,MAAOF,EADhC,EACgCA,QAAS/D,EADzC,EACyCA,SAAUgE,EADnD,EACmDA,QAASG,EAD5D,EAC4DA,OAAQd,EADpE,EACoEA,QAASC,EAD7E,EAC6EA,eAEhF6B,EAAe,aACfhE,GAAO,EACPR,EAAa,IAajB,OAZkB,IAAdX,EAAiBmF,GAAgB,WACd,IAAdnF,GACPmF,GAAgB,OAChBhE,EAAMkC,EACN1C,EAAa2C,IAEb6B,GAAgB,OAASnF,EACzBmB,EAAMtB,EAAQG,GACdW,EAAab,EAAcE,IAE7BmB,EAAiB,OAAXgD,IAAiC,IAAdnE,EAAkBmE,EAAShD,EAGlD,yBACE5B,UAAU,MACVC,MAAO,CACLc,QAAS,OACTwB,cAAe,SACfH,SAAU,OACVyD,aAAc,SACd5E,eAAgB,SAChBD,WAAY,SACZb,OAAQ,SAEVS,QAAS,kBAAM,EAAKa,SAAS,CAAEhB,UAAW,EAAGmE,OAAQ,SAEpDF,EACC,4BAAKA,EAAMoB,SACTtB,EACF,kBAAC,WAAD,KACE,0CACA,kBAAC,EAAD,CAASrB,SAAS,KAGpB,kBAAC,WAAD,KACE,yBACEnD,UAAU,UACVC,MAAO,CACLC,MAAO,OACPC,OAAQ,SACR4F,OAAQ,iBACRhF,QAAS,OACTwB,cAAe,SACfF,QAAS,EACTL,aAAc,EACdgE,aAAc,KAGhB,kBAAC,EAAD,CACElC,QAASA,EACTC,eAAgBA,EAChBtD,UAAmC,IAAzBe,KAAK1B,MAAMW,SACrBG,QAAS,kBAAM,EAAKa,SAAS,CAAEhB,UAAW,EAAGmE,OAAQ,UAEvD,yBACE3E,MAAO,CACLc,QAAS,OACTwB,cAAe,SACfvB,WAAY,SACZC,eAAgB,SAChBgF,SAAU,EACVC,SAAU,WACVC,cAAe,KAGjB,kBAAC,EAAD,CAAShD,QAASsB,IAClB,yBAAKxE,MAAO,CAAEkC,QAAUsC,IAAyB,IAAdhE,EAAsB,EAAJ,EAAOwB,WAAY,YAAaiE,SAAU,aAC5FN,IAGL,kBAAC,EAAD,CACEtF,QAASA,EACTC,cAAeA,EACfE,SAAUA,EACVG,QAAS,SAAAjB,GAAC,OAAI,EAAK8B,SAAS,CAAEhB,SAAUd,EAAGiF,OAAQ,WAIvD,kBAAC,EAAD,CAAWlD,WAAY,EAAGC,KAAM,GAAIvB,OAAQ,EAAGwB,IAAKA,EAAKR,WAAYA,EAAYR,QAAS,SAAC9B,EAAGC,GAAJ,OAAU,EAAKqH,YAAYtH,EAAGC,MAExH,yBAAKkB,MAAO,CAAEc,QAAS,OAAQwB,cAAe,SAAUvB,WAAY,SAAUqF,UAAW,KACvF,6BACE,0CACA,4BAAQtD,SAAU,SAAAlC,GAAC,OAAI,EAAKyF,gBAAgBzF,EAAEiC,OAAOD,QAAQA,MAAOrB,KAAK1B,MAAM6E,QAC5E,CAAC,IAAD,mBAAQ4B,OAAOC,KAAKhF,KAAK1B,MAAMqE,WAC7BsC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC/BE,KAAI,SAAAC,GAAC,OACJ,4BAAQjE,MAAOiE,EAAGnG,IAAKmG,GACpBA,OAIT,4BAAQlG,QAAS,kBAAM,EAAKmG,iBAAgB,KAA5C,QACA,4BACEnG,QAAS,WACP,EAAKa,SAAS,CAAEgD,SAAS,IAAQ,kBAC/BK,IACGQ,KAAKrB,EAAY,UACjBe,MAAK,SAAAC,GAAQ,OAAI,EAAKxD,SAAL,aAAgB+C,SAAS,EAAOC,SAAS,EAAOG,OAAQ,KAAMD,OAAQ,IAAOM,EAASC,eALhH,iBAjMhB,GAAyBhE,aCCL8F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.584e6ca4.chunk.js","sourcesContent":["// ported from arduino code so that it is comsistent across platforms\nexport function rgbFromHsv(h, s, v) {\n  // this is the algorithm to convert from RGB to HSV\n  h = Math.floor((h * 192) / 256); // 0..191\n  let i = Math.floor(h / 32); // We want a value of 0 thru 5\n  let f = (h % 32) * 8; // 'fractional' part of 'i' 0..248 in jumps\n\n  let sInv = 255 - s; // 0 -> 0xff, 0xff -> 0\n  let fInv = 255 - f; // 0 -> 0xff, 0xff -> 0\n  let pv = (v * sInv) / 256; // pv will be in range 0 - 255\n  let qv = (v * (256 - (s * f) / 256)) / 256;\n  let tv = (v * (256 - (s * fInv) / 256)) / 256;\n\n  let rgb;\n  switch (i) {\n    case 0:\n      rgb = [v, tv, pv];\n      break;\n    case 1:\n      rgb = [qv, v, pv];\n      break;\n    case 2:\n      rgb = [pv, v, tv];\n      break;\n    case 3:\n      rgb = [pv, qv, v];\n      break;\n    case 4:\n      rgb = [tv, pv, v];\n      break;\n    case 5:\n    default:\n      rgb = [v, pv, qv];\n      break;\n  }\n\n  return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]}`;\n}\n","import React from 'react';\nimport { Component } from 'react';\nimport './Bars.css';\nimport { rgbFromHsv } from '../Util/hsv';\n\nexport class Bars extends Component {\n  constructor(props) {\n    super(props);\n\n    const heights = [];\n    for (let i = 0; i < 16; i++) {\n      heights.push(Math.random() * 60 + 20);\n    }\n    this.state = { heights };\n  }\n\n  render() {\n    const bars = [];\n    for (let i = 0; i < 16; i++) {\n      bars.push(\n        <div\n          className=\"bar\"\n          style={{\n            width: 18,\n            height: this.state.heights[i],\n            margin: 2,\n            backgroundColor: rgbFromHsv(this.props.barHues[i], this.props.barSaturation[i], 255),\n            outline: this.props.selected === i ? '1px solid white' : undefined\n          }}\n          key={i}\n          onClick={e => {\n            this.props.onClick(i);\n            e.stopPropagation();\n          }}\n        ></div>\n      );\n    }\n\n    return <div style={{ display: 'flex', alignItems: 'flex-end', justifyContent: 'center' }}>{bars}</div>;\n  }\n}\n","import React from 'react';\nimport { Component } from 'react';\nimport { rgbFromHsv } from '../Util/hsv';\nimport './ColorGrid.css';\n\nexport class ColorGrid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { saturation: 255, syncSaturation: true };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // A bit messy, but the saturation state should be updated when in the \"synchronized mode\" and when it gets turned on\n    if (\n      (this.props.saturation !== prevProps.saturation && this.state.syncSaturation) ||\n      (!prevState.syncSaturation && this.state.syncSaturation)\n    ) {\n      this.setState({ saturation: this.props.saturation });\n    }\n  }\n\n  render() {\n    const { dimensions, size, margin, hue } = this.props;\n    const sizeSquared = dimensions * dimensions;\n    const width = (size + margin * 2) * dimensions;\n\n    const items = [];\n\n    for (let i = 0; i < sizeSquared; i++) {\n      const h = Math.floor((i / sizeSquared) * 255);\n      const color = rgbFromHsv(h, this.state.saturation, 255);\n\n      items.push(\n        <div\n          className=\"gridItem\"\n          style={{\n            width: size,\n            height: size,\n            backgroundColor: color,\n            margin,\n            borderRadius: size / 12,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            transition: 'all 0.2s',\n            outline: hue === h ? '1px solid white' : '1px solid transparent'\n          }}\n          key={i}\n          onClick={e => {\n            this.props.onClick(h, Number(this.state.saturation));\n            e.stopPropagation();\n          }}\n        >\n          <div style={{ opacity: 0, transition: 'all 0.2s' }}>{h}</div>\n        </div>\n      );\n    }\n\n    return (\n      <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', width: width + margin * 2 }}>\n        <div\n          style={{\n            backgroundColor: 'black',\n            display: 'flex',\n            flexWrap: 'wrap',\n            width,\n            padding: margin,\n            textShadow: '1px 1px black'\n          }}\n        >\n          {items}\n        </div>\n\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', paddingTop: 16 }}>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <label style={{ paddingRight: 4 }}>Saturation</label>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"255\"\n              value={this.state.saturation}\n              onClick={e => {\n                this.setState({ saturation: e.target.value });\n                e.stopPropagation();\n              }}\n              onChange={e => {\n                this.setState({ saturation: e.target.value });\n                e.stopPropagation();\n              }}\n            />\n            <span style={{ paddingLeft: 8 }}>{this.state.saturation}</span>\n          </div>\n\n          <div style={{ display: 'flex' }}>\n            <input\n              type=\"checkbox\"\n              checked={this.state.syncSaturation}\n              onClick={e => {\n                this.setState({ syncSaturation: !this.state.syncSaturation });\n                e.stopPropagation();\n              }}\n              onChange={e => {\n                this.setState({ syncSaturation: !this.state.syncSaturation });\n                e.stopPropagation();\n              }}\n            />\n            <label>Sync Saturation</label>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Component } from 'react';\nimport './Spinner.css';\n\n// Spinner from https://tobiasahlin.com/spinkit/\n\nexport class Spinner extends Component {\n  render() {\n    let className = 'sk-cube-grid';\n    if (!this.props.visible) className += ' hidden';\n\n    return (\n      <div className={className} style={{ width: this.props.width || 32, height: this.props.height || 32 }}>\n        <div className=\"sk-cube sk-cube1\"></div>\n        <div className=\"sk-cube sk-cube2\"></div>\n        <div className=\"sk-cube sk-cube3\"></div>\n        <div className=\"sk-cube sk-cube4\"></div>\n        <div className=\"sk-cube sk-cube5\"></div>\n        <div className=\"sk-cube sk-cube6\"></div>\n        <div className=\"sk-cube sk-cube7\"></div>\n        <div className=\"sk-cube sk-cube8\"></div>\n        <div className=\"sk-cube sk-cube9\"></div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Component } from 'react';\nimport './Text.css';\nimport { rgbFromHsv } from '../Util/hsv';\n\nexport class Text extends Component {\n  constructor(props) {\n    super(props);\n\n    const d = new Date();\n    this.state = { time: d.toLocaleTimeString(), date: d.toLocaleDateString() };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => {\n      const d = new Date();\n      this.setState({ time: d.toLocaleTimeString(), date: d.toLocaleDateString() });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  render() {\n    return (\n      <div\n        className=\"text\"\n        style={{\n          color: rgbFromHsv(this.props.textHue, this.props.textSaturation, 255),\n          fontSize: 16,\n          width: '100%',\n          outline: this.props.selected ? '1px solid white' : undefined\n        }}\n        onClick={e => {\n          this.props.onClick(e);\n          e.stopPropagation();\n        }}\n      >\n        <div style={{ display: 'flex', alignItems: 'flex-begin', justifyContent: 'space-between', width: '100%' }}>\n          <div style={{ fontSize: 32 }}>{this.state.time}</div>\n          <div style={{ paddingTop: 4 }}>Weather</div>\n        </div>\n        <div>{this.state.date}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Bars } from './Components/Bars';\nimport { ColorGrid } from './Components/ColorGrid';\nimport { Spinner } from './Components/Spinner';\nimport { Text } from './Components/Text';\n\nconst serverUrl = 'https://home.amcolash.com:9000/spectrum/color';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    let presets = localStorage.getItem('presets');\n    if (presets) presets = JSON.parse(presets);\n    else presets = {};\n\n    this.state = {\n      loading: true,\n      setting: false,\n      error: null,\n      barHues: [],\n      barSaturation: [],\n      textHue: 0,\n      textSaturation: 0,\n      selected: -1,\n      presets,\n      preset: '',\n      tmpHue: null\n    };\n  }\n\n  componentDidMount() {\n    this.getServerColors();\n  }\n\n  getServerColors(preset) {\n    axios\n      .get(serverUrl)\n      .then(response => this.setState({ loading: false, setting: false, tmpHue: null, preset: preset || '', ...response.data }))\n      .catch(err => {\n        console.error(err);\n        this.setState({ error: err });\n      });\n  }\n\n  setServerColors(data, preset) {\n    this.setState({ setting: true, preset: preset || '' }, () => {\n      axios\n        .post(serverUrl + '?data=' + JSON.stringify(data))\n        .then(response => this.setState({ loading: false, setting: false, tmpHue: null, preset: preset || '', ...response.data }))\n        .catch(err => {\n          console.error(err);\n        });\n    });\n  }\n\n  saveColorPreset() {\n    let presets = localStorage.getItem('presets');\n    if (presets) presets = JSON.parse(presets);\n    else presets = {};\n\n    const name = prompt('Preset Name?', 'default');\n    if (name) {\n      const { barHues, barSaturation, textHue, textSaturation } = this.state;\n      presets[name] = { barHues, barSaturation, textHue, textSaturation };\n      localStorage.setItem('presets', JSON.stringify(presets));\n\n      this.setState({ presets, preset: name });\n    }\n  }\n\n  loadColorPreset(name) {\n    let presets = localStorage.getItem('presets');\n    if (presets) {\n      presets = JSON.parse(presets);\n      if (presets[name]) {\n        const { barHues, barSaturation, textHue, textSaturation } = presets[name];\n\n        this.setServerColors({ barHues, barSaturation, textHue, textSaturation }, name);\n      }\n    }\n  }\n\n  updateColor(h, s) {\n    this.setState({ tmpHue: h }, () => {\n      let { barHues, barSaturation, textHue, textSaturation, selected } = this.state;\n\n      if (this.state.selected === -1) return;\n      else if (this.state.selected === -2) {\n        textHue = h;\n        textSaturation = s;\n      } else {\n        barHues = [...this.state.barHues];\n        barSaturation = [...this.state.barSaturation];\n        barHues[selected] = h;\n        barSaturation[selected] = s;\n      }\n\n      this.setServerColors({ barHues, barSaturation, textHue, textSaturation });\n    });\n  }\n\n  render() {\n    const { barHues, barSaturation, error, loading, selected, setting, tmpHue, textHue, textSaturation } = this.state;\n\n    let selectedText = 'Selected: ';\n    let hue = -1;\n    let saturation = 255;\n    if (selected === -1) selectedText += 'Nothing';\n    else if (selected === -2) {\n      selectedText += 'Text';\n      hue = textHue;\n      saturation = textSaturation;\n    } else {\n      selectedText += 'Bar ' + selected;\n      hue = barHues[selected];\n      saturation = barSaturation[selected];\n    }\n    hue = tmpHue !== null && selected !== -1 ? tmpHue : hue;\n\n    return (\n      <div\n        className=\"app\"\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          flexWrap: 'wrap',\n          alignContent: 'center',\n          justifyContent: 'center',\n          alignItems: 'center',\n          height: '100vh'\n        }}\n        onClick={() => this.setState({ selected: -1, tmpHue: null })}\n      >\n        {error ? (\n          <h1>{error.message}</h1>\n        ) : loading ? (\n          <Fragment>\n            <h1>Loading...</h1>\n            <Spinner visible={true} />\n          </Fragment>\n        ) : (\n          <Fragment>\n            <div\n              className=\"display\"\n              style={{\n                width: '22em',\n                height: '12.3em',\n                border: '1px solid gray',\n                display: 'flex',\n                flexDirection: 'column',\n                padding: 3,\n                borderRadius: 3,\n                marginBottom: 20\n              }}\n            >\n              <Text\n                textHue={textHue}\n                textSaturation={textSaturation}\n                selected={this.state.selected === -2}\n                onClick={() => this.setState({ selected: -2, tmpHue: null })}\n              />\n              <div\n                style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  flexGrow: 1,\n                  position: 'relative',\n                  paddingBottom: 10\n                }}\n              >\n                <Spinner visible={setting} />\n                <div style={{ opacity: !setting && selected !== -1 ? 1 : 0, transition: 'all 0.35s', position: 'absolute' }}>\n                  {selectedText}\n                </div>\n              </div>\n              <Bars\n                barHues={barHues}\n                barSaturation={barSaturation}\n                selected={selected}\n                onClick={i => this.setState({ selected: i, tmpHue: null })}\n              />\n            </div>\n\n            <ColorGrid dimensions={7} size={32} margin={2} hue={hue} saturation={saturation} onClick={(h, s) => this.updateColor(h, s)} />\n\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: 20 }}>\n              <div>\n                <label>Presets</label>\n                <select onChange={e => this.loadColorPreset(e.target.value)} value={this.state.preset}>\n                  {['', ...Object.keys(this.state.presets)]\n                    .sort((a, b) => a.localeCompare(b))\n                    .map(p => (\n                      <option value={p} key={p}>\n                        {p}\n                      </option>\n                    ))}\n                </select>\n                <button onClick={() => this.saveColorPreset(true)}>Save</button>\n                <button\n                  onClick={() => {\n                    this.setState({ setting: true }, () =>\n                      axios\n                        .post(serverUrl + '?reset')\n                        .then(response => this.setState({ loading: false, setting: false, tmpHue: null, preset: '', ...response.data }))\n                    );\n                  }}\n                >\n                  Reset\n                </button>\n              </div>\n            </div>\n          </Fragment>\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}